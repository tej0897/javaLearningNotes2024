What is an array?

    * Contains elements of a similar type.

    * Elements are stored in contigious memory location.

    * We can store primitive values or objects in an array.

    * Every element occupies the same amount of space in memory.

    (So, what happens when we store an array of objects like strings, they will have different size? Answer: When we have an array of String / Objects, the array stores "reference to those objects" and not the object itself. Reference to Objects will take the same space regardless of the type of object we're referring to.)

    * If an array starts at memory address x, and the size of each emelent in the array is y, we can calculate the memory address of the ith element by using the expression: {x + i * y}

    * If we know the index of an element, the time to retrieve the element will be the same, no matter where the element is in the array.

    * Can store only fixed set of elements.

    * Index based, 1st element is stored in 0th index, 2nd in 1st index and so on.


            **********


Advantages:

    * we can retrieve or sort the data efficiently.

    * Random access: We can get any data located at an index position.


            **********


Disadvantages:

    * Size Limit: We can store only the fixed size of elements in the array.

    * It doesn't grow its size at runtime.

    * To solve this problem, collection framework is used in Java which grows automatically.


            **********


Syntax:

    int array [] = new int[5];
        //declaration and instantiation


    int array [] = {33,3,4,5};
        //declaration, instantiation and initialization


            **********


Big-O Values for Array Operations:

    * Retrieve an element from an Array when we know the index: O(1)  -   constant time complexity.

    * Retrieve an element from an Array when we do not know the index: O(n)   -   Linear : how?

        In this case, look for the worst case scenario. i.e. the element we want is in the last index. If the array length is 10, then worst case scenario is 10. If the array length is 100000, then the worst case scenario is 100000. So, the number of element in the array is influencing the complexity. Therefore, for this scenario, the Big O Value is : O(n)

    * Add an element to a full array: O(n)

    * Add an element to the end of an array: O(1)

    * Insert or update an element at a specific index: O(1)

    * Delete an element by setting it to null: O(1)

    * Delete an element by shifting elements: O(n)


            **********


What will be the size of array for : int [] arrayExample

    In Java, when you declare an array like int[] arrayExample;, you are only declaring a reference to an array of integers, not allocating memory for the array itself.

    At this point, arrayExample is simply a reference that can point to an array of integers, but it doesn't actually point anywhere yet.

    To actually create an array and allocate memory for it, you need to instantiate it using the new keyword. For example:

    arrayExample = new int[10];

    This line of code creates an array of integers with a size of 10 and assigns it to arrayExample.

    So, after executing this line, arrayExample will point to an array of size 10.


            **********
