Insertion Sort:

    * Divides the array into sorted and unsorted partitions just like bubble sort.

    * Grows assorted partition from left to right.


            **********


Working:

    consider the following array:

elements:   20    35    -15    7    55    1    -22
index:      0     1      2     3    4     5     6

    
    * Starts out by saying the element in position zero is in sorted partition because the length of partitioned side is 1. (So, by default the element is sorted)

    * The elements from one till the end (right) is in unsorted partition. So, index of firstUnsortedIndex = 1

        firstUnsortedIndex : 1 - first index of unsorted partition.

        i = 0 - index used to traverse the sorted partition from right to left.

        newElement = 35 - the value we want to insert into the sorted partition - array[firstUnsortedIndex]

    * We insert the new value to the sorted partition (array[firstUnsortedIndex]), before inserting, we compare the value we're inserting with the values in the sorted partition. We traverse the sorted partition from right to left.

    * We look for the value that is less than or equal to the one we're trying to insert. Once we find that value, we stop looking as we found the position for the new value.

    * After inserting the value, the following changes happen:
        a. firstUnsortedIndex : 2 
        b. i = 1
        c. newElement: -15

    and the cycle continues.


            **********


    1. We assume array is of size one and it is sorted.

    2. The array now is divided into two parts. Sorted and unsorted. (Sorted being the first element)

    3. We need the following variables:
        a. firstUnsortedIndex - first index of the unsorted partition.

        b. i - to traverse the sorted partition from right to left. (IMP)

        c. New Element - element which we want to add to the sorted partition.

Short story on how do we add new element and traverse:

    1. firstUnsortedIndex will be the NewElement we add to the sorted partition.

    2. NewElement will be compared from right to left using "i" for iteration.

    3. If the new element is
        a. greater than the right most element, it means the new element is in the correct position. So we leave it as it is.

        b. lesser than the right most element, then the right most element will be copied to index+1 position. The comparision continues and will stop when either step a happens or when the index reaches the 0th index.

    4. Step 3 will be continued till the firstUnsortedIndex value becomes array.length-1 which means the entire array is sorted.


            **********


Complexity:

    * In-Place Algorithm : Means we are using single array for partition and sort the elements instead of creating a new Array.

    * O(n^2) - quadratic

    * 100 steps to sort 10 items, 10,000 steps to sort 100 items, 10,00,000 steps to sort 1000 items.

    * Stable Algorithm


            **********
